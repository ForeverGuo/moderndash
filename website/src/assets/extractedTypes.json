{
	"id": 0,
	"name": "moderndash",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 176,
			"name": "after",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "function/after.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/after.ts#L15"
				}
			],
			"signatures": [
				{
					"id": 177,
					"name": "after",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The opposite of "
							},
							{
								"kind": "code",
								"text": "`before`"
							},
							{
								"kind": "text",
								"text": ". This method creates a function that invokes "
							},
							{
								"kind": "code",
								"text": "`func`"
							},
							{
								"kind": "text",
								"text": " once it's called "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " or more times."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new restricted function."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst caution = () => alert(\"Caution!\");\n\n// Display alert only after it has been called 5 times\nafter(5, caution)\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 181,
							"name": "TFunc",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 178,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "function/after.ts",
											"line": 15,
											"character": 36,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/after.ts#L15"
										}
									],
									"signatures": [
										{
											"id": 179,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 180,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"id": 181,
																"name": "TFunc"
															}
														],
														"name": "Parameters",
														"qualifiedName": "Parameters",
														"package": "typescript"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 181,
														"name": "TFunc"
													}
												],
												"name": "ReturnType",
												"qualifiedName": "ReturnType",
												"package": "typescript"
											}
										}
									]
								}
							}
						}
					],
					"parameters": [
						{
							"id": 182,
							"name": "n",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of calls before "
									},
									{
										"kind": "code",
										"text": "`func`"
									},
									{
										"kind": "text",
										"text": " is invoked."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 183,
							"name": "func",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to restrict."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 181,
								"name": "TFunc"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 184,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "function/after.ts",
									"line": 17,
									"character": 11,
									"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/after.ts#L17"
								}
							],
							"signatures": [
								{
									"id": 185,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 186,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 181,
														"name": "TFunc"
													}
												],
												"name": "Parameters",
												"qualifiedName": "Parameters",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 181,
														"name": "TFunc"
													}
												],
												"name": "ReturnType",
												"qualifiedName": "ReturnType",
												"package": "typescript"
											}
										]
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 187,
			"name": "before",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "function/before.ts",
					"line": 17,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/before.ts#L17"
				}
			],
			"signatures": [
				{
					"id": 188,
					"name": "before",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a function that invokes "
							},
							{
								"kind": "code",
								"text": "`func`"
							},
							{
								"kind": "text",
								"text": ", with the "
							},
							{
								"kind": "code",
								"text": "`this`"
							},
							{
								"kind": "text",
								"text": " binding and arguments\nof the created function, while it's called less than "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " times. Subsequent\ncalls to the created function return the result of the last "
							},
							{
								"kind": "code",
								"text": "`func`"
							},
							{
								"kind": "text",
								"text": " invocation."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new restricted function."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst caution = () => alert(\"Caution!\");\n\n// Only call caution two times\nbefore(2, caution)\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 192,
							"name": "TFunc",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 189,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "function/before.ts",
											"line": 17,
											"character": 37,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/before.ts#L17"
										}
									],
									"signatures": [
										{
											"id": 190,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 191,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"id": 192,
																"name": "TFunc"
															}
														],
														"name": "Parameters",
														"qualifiedName": "Parameters",
														"package": "typescript"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 192,
														"name": "TFunc"
													}
												],
												"name": "ReturnType",
												"qualifiedName": "ReturnType",
												"package": "typescript"
											}
										}
									]
								}
							}
						}
					],
					"parameters": [
						{
							"id": 193,
							"name": "n",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of calls at which "
									},
									{
										"kind": "code",
										"text": "`func`"
									},
									{
										"kind": "text",
										"text": " is no longer invoked."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 194,
							"name": "func",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to restrict."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 192,
								"name": "TFunc"
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 192,
						"name": "TFunc"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "chunk",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/chunk.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/chunk.ts#L16"
				}
			],
			"signatures": [
				{
					"id": 2,
					"name": "chunk",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of chunks."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nchunk(2, ['a', 'b', 'c', 'd'])\n// => [['a', 'b'], ['c', 'd']]\n\nchunk(3, ['a', 'b', 'c', 'd'])\n// => [['a', 'b', 'c'], ['d']]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 3,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 4,
							"name": "chunkSize",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to process."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 5,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The length of each chunk"
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 3,
									"name": "TInput"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "array",
							"elementType": {
								"type": "reference",
								"id": 3,
								"name": "TInput"
							}
						}
					}
				}
			]
		},
		{
			"id": 149,
			"name": "countBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "collection/countBy.ts",
					"line": 25,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/collection/countBy.ts#L25"
				}
			],
			"signatures": [
				{
					"id": 150,
					"name": "countBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object composed of keys generated from the results of running\neach element of "
							},
							{
								"kind": "code",
								"text": "`collection`"
							},
							{
								"kind": "text",
								"text": " thru "
							},
							{
								"kind": "code",
								"text": "`iteratee`"
							},
							{
								"kind": "text",
								"text": ". The corresponding value of\neach key is the number of times the key was returned by "
							},
							{
								"kind": "code",
								"text": "`iteratee`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the composed aggregate object."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'betty', 'active': true },\n  { 'user': 'fred', 'active': false }\n]\n\ncountBy(value => value.active, users);\n// => { 'true': 2, 'false': 1 }\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 151,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 152,
							"name": "TKey",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "RecordKey"
							}
						}
					],
					"parameters": [
						{
							"id": 153,
							"name": "iteratee",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The iteratee to transform keys."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 154,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "collection/countBy.ts",
											"line": 25,
											"character": 66,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/collection/countBy.ts#L25"
										}
									],
									"signatures": [
										{
											"id": 155,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 156,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 151,
														"name": "TInput"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 152,
												"name": "TKey"
											}
										}
									]
								}
							}
						},
						{
							"id": 157,
							"name": "collection",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array or object to iterate over."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 151,
										"name": "TInput"
									}
								],
								"name": "Collection"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 152,
								"name": "TKey"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						],
						"name": "Record",
						"qualifiedName": "Record",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 6,
			"name": "difference",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/difference.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/difference.ts#L19"
				}
			],
			"signatures": [
				{
					"id": 7,
					"name": "difference",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an array of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " values not included in the other given arrays. The order and references of result values are determined by the first array.\n\n**Note:** Unlike "
							},
							{
								"kind": "code",
								"text": "`pullAll`"
							},
							{
								"kind": "text",
								"text": ", this method returns a new array."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of filtered values."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\ndifference([2, 1], [2, 3])\n// =\\> [1]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 8,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 9,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "First array is inspected, others are excluded."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 8,
										"name": "T"
									}
								],
								"name": "MinimumTwoArrays"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 8,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 10,
			"name": "differenceBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/differenceBy.ts",
					"line": 27,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/differenceBy.ts#L27"
				}
			],
			"signatures": [
				{
					"id": 11,
					"name": "differenceBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`difference`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`iteratee`"
							},
							{
								"kind": "text",
								"text": " which\nis invoked for each element of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`values`"
							},
							{
								"kind": "text",
								"text": " to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array.\n\n**Note:** Unlike "
							},
							{
								"kind": "code",
								"text": "`pullAllBy`"
							},
							{
								"kind": "text",
								"text": ", this method returns a new array."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of filtered values."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\ndifferenceBy(Math.floor, [2.1, 1.2], [2.3, 3.4])\n// => [1.2]\ndifferenceBy('x', [{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }])\n// => [{ 'x': 2 }]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 12,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 13,
							"name": "iteratee",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The iteratee invoked per element. Or property shorthand."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 12,
												"name": "T"
											}
										],
										"name": "IterateeFunction"
									},
									{
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 12,
											"name": "T"
										}
									}
								]
							}
						},
						{
							"id": 14,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "First array to inspect. Others are excluded."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 12,
										"name": "T"
									}
								],
								"name": "MinimumTwoArrays"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 12,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 15,
			"name": "differenceWith",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/differenceWith.ts",
					"line": 20,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/differenceWith.ts#L20"
				}
			],
			"signatures": [
				{
					"id": 16,
					"name": "differenceWith",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`difference`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`comparator`"
							},
							{
								"kind": "text",
								"text": "\nwhich is invoked to compare elements of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " to "
							},
							{
								"kind": "code",
								"text": "`values`"
							},
							{
								"kind": "text",
								"text": ". The order and\nreferences of result values are determined by the first array. The comparator\nis invoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike "
							},
							{
								"kind": "code",
								"text": "`pullAllWith`"
							},
							{
								"kind": "text",
								"text": ", this method returns a new array."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of filtered values."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\ndifferenceWith(isEqual, [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }], [{ 'x': 1, 'y': 2 }])\n// => [{ 'x': 2, 'y': 1 }]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 17,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 18,
							"name": "comparator",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator invoked per element."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 19,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/differenceWith.ts",
											"line": 20,
											"character": 46,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/differenceWith.ts#L20"
										}
									],
									"signatures": [
										{
											"id": 20,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 21,
													"name": "a",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 17,
														"name": "T"
													}
												},
												{
													"id": 22,
													"name": "b",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 17,
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 23,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "First array to inspect. Others are excluded."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 17,
										"name": "T"
									}
								],
								"name": "MinimumTwoArrays"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 17,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 24,
			"name": "dropRightWhile",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/dropRightWhile.ts",
					"line": 22,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/dropRightWhile.ts#L22"
				}
			],
			"signatures": [
				{
					"id": 25,
					"name": "dropRightWhile",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a slice of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " excluding elements dropped from the end.\nElements are dropped until "
							},
							{
								"kind": "code",
								"text": "`predicate`"
							},
							{
								"kind": "text",
								"text": " returns falsey. The predicate is\ninvoked with three arguments: (value, index, array)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the slice of "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': true }\n]\n\ndropRightWhile(({ active }) => active, users)\n// => objects for ['barney']\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 26,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 27,
							"name": "predicate",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function invoked per iteration."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 28,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/dropRightWhile.ts",
											"line": 22,
											"character": 45,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/dropRightWhile.ts#L22"
										}
									],
									"signatures": [
										{
											"id": 29,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 30,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 26,
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 31,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to query."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 26,
									"name": "T"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 26,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 32,
			"name": "dropWhile",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/dropWhile.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/dropWhile.ts#L21"
				}
			],
			"signatures": [
				{
					"id": 33,
					"name": "dropWhile",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a slice of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " excluding elements dropped from the beginning.\nElements are dropped until "
							},
							{
								"kind": "code",
								"text": "`predicate`"
							},
							{
								"kind": "text",
								"text": " returns falsey. The predicate is\ninvoked with three arguments: (value, index, array)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the slice of "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': false }\n]\n\ndropWhile(({ active }) => active, users)\n// => objects for ['pebbles']\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 34,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 35,
							"name": "predicate",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function invoked per iteration."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 36,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/dropWhile.ts",
											"line": 21,
											"character": 40,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/dropWhile.ts#L21"
										}
									],
									"signatures": [
										{
											"id": 37,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 38,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 34,
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 39,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to query."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 34,
									"name": "T"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 34,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 158,
			"name": "groupBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "collection/groupBy.ts",
					"line": 23,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/collection/groupBy.ts#L23"
				}
			],
			"signatures": [
				{
					"id": 159,
					"name": "groupBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object composed of keys generated from the results of running\neach element of "
							},
							{
								"kind": "code",
								"text": "`collection`"
							},
							{
								"kind": "text",
								"text": " thru "
							},
							{
								"kind": "code",
								"text": "`iteratee`"
							},
							{
								"kind": "text",
								"text": ". The order of grouped values\nis determined by the order they occur in "
							},
							{
								"kind": "code",
								"text": "`collection`"
							},
							{
								"kind": "text",
								"text": ". The corresponding\nvalue of each key is an array of elements responsible for generating the\nkey."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the composed aggregate object."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\ngroupBy(Math.floor, [6.1, 4.2, 6.3])\n// => { '4': [4.2], '6': [6.1, 6.3] }\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 160,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 161,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "RecordKey"
							}
						}
					],
					"parameters": [
						{
							"id": 162,
							"name": "iteratee",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The iteratee to transform keys."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 163,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "collection/groupBy.ts",
											"line": 23,
											"character": 58,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/collection/groupBy.ts#L23"
										}
									],
									"signatures": [
										{
											"id": 164,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 165,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 160,
														"name": "T"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 161,
												"name": "U"
											}
										}
									]
								}
							}
						},
						{
							"id": 166,
							"name": "collection",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array or object to iterate over."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 160,
										"name": "T"
									}
								],
								"name": "Collection"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 161,
								"name": "U"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 160,
									"name": "T"
								}
							}
						],
						"name": "Record",
						"qualifiedName": "Record",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 40,
			"name": "intersection",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/intersection.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/intersection.ts#L18"
				}
			],
			"signatures": [
				{
					"id": 41,
					"name": "intersection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an array of unique values that are included in all given arrays.\nThe order and references of result values are determined by the first array."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of intersecting values."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nintersection([2, 1], [2, 3])\n// => [2]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 42,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 43,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arrays to inspect."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 42,
										"name": "TInput"
									}
								],
								"name": "MinimumTwoArrays"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 42,
							"name": "TInput"
						}
					}
				}
			]
		},
		{
			"id": 44,
			"name": "intersectionBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/intersectionBy.ts",
					"line": 23,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/intersectionBy.ts#L23"
				}
			],
			"signatures": [
				{
					"id": 45,
					"name": "intersectionBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`intersection`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`iteratee`"
							},
							{
								"kind": "text",
								"text": "\nwhich is invoked for each element of each "
							},
							{
								"kind": "code",
								"text": "`arrays`"
							},
							{
								"kind": "text",
								"text": " to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of intersecting values."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nintersectionBy(Math.floor, [2.1, 1.2], [2.3, 3.4])\n// => [2.1]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 46,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 47,
							"name": "iteratee",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The iteratee invoked per element. Or property shorthand."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 46,
												"name": "TInput"
											}
										],
										"name": "IterateeFunction"
									},
									{
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 46,
											"name": "TInput"
										}
									}
								]
							}
						},
						{
							"id": 48,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arrays to inspect."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 46,
										"name": "TInput"
									}
								],
								"name": "MinimumTwoArrays"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 46,
							"name": "TInput"
						}
					}
				}
			]
		},
		{
			"id": 49,
			"name": "intersectionWith",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/intersectionWith.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/intersectionWith.ts#L21"
				}
			],
			"signatures": [
				{
					"id": 50,
					"name": "intersectionWith",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`intersection`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`comparator`"
							},
							{
								"kind": "text",
								"text": "\nwhich is invoked to compare elements of "
							},
							{
								"kind": "code",
								"text": "`arrays`"
							},
							{
								"kind": "text",
								"text": ". The order and references\nof result values are determined by the first array. The comparator is\ninvoked with two arguments: (arrVal, othVal)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of intersecting values."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\nconst others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n\nintersectionWith(isEqual, objects, others)\n// => [{ 'x': 1, 'y': 2 }]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 51,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 52,
							"name": "comparator",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator invoked per element."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 53,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/intersectionWith.ts",
											"line": 21,
											"character": 48,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/intersectionWith.ts#L21"
										}
									],
									"signatures": [
										{
											"id": 54,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 55,
													"name": "a",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 51,
														"name": "T"
													}
												},
												{
													"id": 56,
													"name": "b",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 51,
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 57,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arrays to inspect."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 51,
										"name": "T"
									}
								],
								"name": "MinimumTwoArrays"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 51,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 212,
			"name": "memoize",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "function/memoize.ts",
					"line": 43,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/memoize.ts#L43"
				}
			],
			"signatures": [
				{
					"id": 213,
					"name": "memoize",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a function that memoizes the result of "
							},
							{
								"kind": "code",
								"text": "`func`"
							},
							{
								"kind": "text",
								"text": ". If "
							},
							{
								"kind": "code",
								"text": "`resolver`"
							},
							{
								"kind": "text",
								"text": " is\nprovided, it determines the cache key for storing the result based on the\narguments provided to the memoized function. By default, all arguments\nprovided to the memoized function are used as the map cache key.\n\n**Note:** The cache is exposed as the "
							},
							{
								"kind": "code",
								"text": "`cache`"
							},
							{
								"kind": "text",
								"text": " property on the memoized\nfunction. Its creation may be customized by replacing the "
							},
							{
								"kind": "code",
								"text": "`memoize.Cache`"
							},
							{
								"kind": "text",
								"text": "\nconstructor with one whose instances implement the\n["
							},
							{
								"kind": "code",
								"text": "`Map`"
							},
							{
								"kind": "text",
								"text": "](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\nmethod interface of "
							},
							{
								"kind": "code",
								"text": "`clear`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`delete`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`get`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`has`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`set`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new memoized function."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const object = { 'a': 1, 'b': 2 }\n\nconst values = memoize(values)\nvalues(object)\n// => [1, 2]\n\nvalues(object)\n// => [1, 2]\n\nobject.a = 2\nvalues(object)\n// => [2, 2]\n\n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b'])\nvalues(object)\n// => ['a', 'b']\n\n// Replace "
									},
									{
										"kind": "code",
										"text": "`memoize.Cache`"
									},
									{
										"kind": "text",
										"text": ".\nmemoize.Cache = WeakMap"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 217,
							"name": "TFunc",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 214,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "function/memoize.ts",
											"line": 43,
											"character": 38,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/memoize.ts#L43"
										}
									],
									"signatures": [
										{
											"id": 215,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 216,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"id": 217,
																"name": "TFunc"
															}
														],
														"name": "Parameters",
														"qualifiedName": "Parameters",
														"package": "typescript"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 217,
														"name": "TFunc"
													}
												],
												"name": "ReturnType",
												"qualifiedName": "ReturnType",
												"package": "typescript"
											}
										}
									]
								}
							}
						}
					],
					"parameters": [
						{
							"id": 218,
							"name": "func",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to have its output memoized."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 217,
								"name": "TFunc"
							}
						},
						{
							"id": 219,
							"name": "resolver",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to resolve the cache key."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 220,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "function/memoize.ts",
											"line": 44,
											"character": 28,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/memoize.ts#L44"
										}
									],
									"signatures": [
										{
											"id": 221,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 222,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"id": 217,
																"name": "TFunc"
															}
														],
														"name": "Parameters",
														"qualifiedName": "Parameters",
														"package": "typescript"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									]
								}
							},
							"defaultValue": "defaultResolver"
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 217,
								"name": "TFunc"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 223,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 224,
											"name": "cache",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "function/memoize.ts",
													"line": 45,
													"character": 13,
													"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/memoize.ts#L45"
												}
											],
											"type": {
												"type": "reference",
												"name": "Cache"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												224
											]
										}
									],
									"sources": [
										{
											"fileName": "function/memoize.ts",
											"line": 45,
											"character": 11,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/function/memoize.ts#L45"
										}
									]
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 267,
			"name": "pick",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "object/pick.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/object/pick.ts#L16"
				}
			],
			"signatures": [
				{
					"id": 268,
					"name": "pick",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object composed of the picked "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": " properties."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new object."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst object = { 'a': 1, 'b': '2', 'c': 3 }\n\npick(object, ['a', 'c'])\n// => { 'a': 1, 'c': 3 }\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 269,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 270,
							"name": "K",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 271,
							"name": "object",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The source object."
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 269,
								"name": "T"
							}
						},
						{
							"id": 272,
							"name": "keys",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The property paths to pick."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 270,
									"name": "K"
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 269,
								"name": "T"
							},
							{
								"type": "reference",
								"id": 270,
								"name": "K"
							}
						],
						"name": "Pick",
						"qualifiedName": "Pick",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 58,
			"name": "sample",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/sample.ts",
					"line": 12,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/sample.ts#L12"
				}
			],
			"signatures": [
				{
					"id": 59,
					"name": "sample",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets a random element from "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the random element."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nsample([1, 2, 3, 4])\n// => 2\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 60,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 61,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to sample."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 60,
									"name": "T"
								}
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 60,
								"name": "T"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			]
		},
		{
			"id": 62,
			"name": "sampleSize",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/sampleSize.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/sampleSize.ts#L19"
				}
			],
			"signatures": [
				{
					"id": 63,
					"name": "sampleSize",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " random elements at unique keys from "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " up to the\nsize of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the random elements."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nsampleSize([1, 2, 3], 2)\n// => [3, 1]\n\nsampleSize([1, 2, 3], 4)\n// => [2, 3, 1]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 64,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 65,
							"name": "size",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to sample."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 66,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to sample."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 64,
									"name": "TInput"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 64,
							"name": "TInput"
						}
					}
				}
			]
		},
		{
			"id": 67,
			"name": "shuffle",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/shuffle.ts",
					"line": 14,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/shuffle.ts#L14"
				}
			],
			"signatures": [
				{
					"id": 68,
					"name": "shuffle",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an array of shuffled values, using a version of the\n[Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle)."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "0.1.0"
									}
								]
							},
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new shuffled array."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nshuffle([1, 2, 3, 4])\n// => [4, 1, 3, 2]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 69,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 70,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array or object to shuffle."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 69,
									"name": "TInput"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 69,
							"name": "TInput"
						}
					}
				}
			]
		},
		{
			"id": 71,
			"name": "takeRightWhile",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/takeRightWhile.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/takeRightWhile.ts#L21"
				}
			],
			"signatures": [
				{
					"id": 72,
					"name": "takeRightWhile",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a slice of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " with elements taken from the end. Elements are\ntaken until "
							},
							{
								"kind": "code",
								"text": "`predicate`"
							},
							{
								"kind": "text",
								"text": " returns falsey. The predicate is invoked with\nthree arguments: (value, index, array)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the slice of "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': true }\n]\n\ntakeRightWhile(({ active }) => active, users)\n// => objects for ['fred', 'pebbles']\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 73,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 74,
							"name": "predicate",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function invoked per iteration."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 75,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/takeRightWhile.ts",
											"line": 21,
											"character": 45,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/takeRightWhile.ts#L21"
										}
									],
									"signatures": [
										{
											"id": 76,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 77,
													"name": "elem",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 73,
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 78,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to query."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 73,
									"name": "T"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 73,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 79,
			"name": "takeWhile",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/takeWhile.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/takeWhile.ts#L21"
				}
			],
			"signatures": [
				{
					"id": 80,
					"name": "takeWhile",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a slice of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " with elements taken from the beginning. Elements\nare taken until "
							},
							{
								"kind": "code",
								"text": "`predicate`"
							},
							{
								"kind": "text",
								"text": " returns falsey. The predicate is invoked with\nthree arguments: (value, index, array)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the slice of "
									},
									{
										"kind": "code",
										"text": "`array`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': false }\n]\n\ntakeWhile(({ active }) => active, users)\n// => objects for ['barney', 'fred']\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 81,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 82,
							"name": "predicate",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function invoked per iteration."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 83,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/takeWhile.ts",
											"line": 21,
											"character": 40,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/takeWhile.ts#L21"
										}
									],
									"signatures": [
										{
											"id": 84,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 85,
													"name": "elem",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 81,
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 86,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to query."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 81,
									"name": "T"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 81,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 87,
			"name": "union",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/union.ts",
					"line": 14,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/union.ts#L14"
				}
			],
			"signatures": [
				{
					"id": 88,
					"name": "union",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an array of unique values, in order, from all given arrays using for equality comparisons."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of combined values."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nunion([2, 3], [1, 2])\n// => [2, 3, 1]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 89,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 90,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arrays to inspect."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 89,
										"name": "TInput"
									}
								],
								"name": "MinimumTwoArrays"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 89,
							"name": "TInput"
						}
					}
				}
			]
		},
		{
			"id": 91,
			"name": "unionBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/unionBy.ts",
					"line": 23,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/unionBy.ts#L23"
				}
			],
			"signatures": [
				{
					"id": 92,
					"name": "unionBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`union`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`iteratee`"
							},
							{
								"kind": "text",
								"text": " which is\ninvoked for each element of each "
							},
							{
								"kind": "code",
								"text": "`arrays`"
							},
							{
								"kind": "text",
								"text": " to generate the criterion by\nwhich uniqueness is computed. Result values are chosen from the first\narray in which the value occurs. The iteratee is invoked with one argument:\n(value)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of combined values."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nunionBy(Math.floor, [2.1], [1.2, 2.3])\n// => [2.1, 1.2]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 93,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 94,
							"name": "iteratee",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The iteratee invoked per element. Or property shorthand."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 93,
												"name": "T"
											}
										],
										"name": "IterateeFunction"
									},
									{
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 93,
											"name": "T"
										}
									}
								]
							}
						},
						{
							"id": 95,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arrays to inspect."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 93,
										"name": "T"
									}
								],
								"name": "MinimumTwoArrays"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 93,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 96,
			"name": "unionWith",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/unionWith.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/unionWith.ts#L21"
				}
			],
			"signatures": [
				{
					"id": 97,
					"name": "unionWith",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`union`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`comparator`"
							},
							{
								"kind": "text",
								"text": " which\nis invoked to compare elements of "
							},
							{
								"kind": "code",
								"text": "`arrays`"
							},
							{
								"kind": "text",
								"text": ". Result values are chosen from\nthe first array in which the value occurs. The comparator is invoked\nwith two arguments: (arrVal, othVal)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of combined values."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\nconst others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n\nunionWith(isEqual, objects, others)\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 98,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 99,
							"name": "comparator",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator invoked per element."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 100,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/unionWith.ts",
											"line": 21,
											"character": 46,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/unionWith.ts#L21"
										}
									],
									"signatures": [
										{
											"id": 101,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 102,
													"name": "a",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 98,
														"name": "TInput"
													}
												},
												{
													"id": 103,
													"name": "b",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 98,
														"name": "TInput"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 104,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arrays to inspect."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 98,
										"name": "TInput"
									}
								],
								"name": "MinimumTwoArrays"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 98,
							"name": "TInput"
						}
					}
				}
			]
		},
		{
			"id": 105,
			"name": "uniq",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/uniq.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/uniq.ts#L16"
				}
			],
			"signatures": [
				{
					"id": 106,
					"name": "uniq",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a duplicate-free version of an array, in which only the first occurrence of each element is kept.\nThe order of result values is determined by the order they occur in the array."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new duplicate free array."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nuniq([2, 1, 2])\n// => [2, 1]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 107,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 108,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to inspect."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 107,
									"name": "TInput"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 107,
							"name": "TInput"
						}
					}
				}
			]
		},
		{
			"id": 109,
			"name": "uniqBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/uniqBy.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/uniqBy.ts#L21"
				}
			],
			"signatures": [
				{
					"id": 110,
					"name": "uniqBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`uniq`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`iteratee`"
							},
							{
								"kind": "text",
								"text": " which is\ninvoked for each element in "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " to generate the criterion by which\nuniqueness is computed. The order of result values is determined by the\norder they occur in the array."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new duplicate free array."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nuniqBy(Math.floor, [2.1, 1.2, 2.3])\n// => [2.1, 1.2]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 111,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 112,
							"name": "iteratee",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The iteratee invoked per element. Or property shorthand."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 111,
												"name": "T"
											}
										],
										"name": "IterateeFunction"
									},
									{
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"id": 111,
											"name": "T"
										}
									}
								]
							}
						},
						{
							"id": 113,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to inspect."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 111,
									"name": "T"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 111,
							"name": "T"
						}
					}
				}
			]
		},
		{
			"id": 114,
			"name": "uniqWith",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/uniqWith.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/uniqWith.ts#L16"
				}
			],
			"signatures": [
				{
					"id": 115,
					"name": "uniqWith",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`uniq`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`comparator`"
							},
							{
								"kind": "text",
								"text": " which is invoked to compare elements of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": ".\nThe order of result values is determined by the order they occur in the array."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new duplicate free array."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }]\n\nuniqWith(isEqual, objects)\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 116,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 117,
							"name": "comparator",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator invoked per element."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 118,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/uniqWith.ts",
											"line": 16,
											"character": 45,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/uniqWith.ts#L16"
										}
									],
									"signatures": [
										{
											"id": 119,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 120,
													"name": "a",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 116,
														"name": "TInput"
													}
												},
												{
													"id": 121,
													"name": "b",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 116,
														"name": "TInput"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 122,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to inspect."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 116,
									"name": "TInput"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 116,
							"name": "TInput"
						}
					}
				}
			]
		},
		{
			"id": 123,
			"name": "unzip",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/unzip.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/unzip.ts#L18"
				}
			],
			"signatures": [
				{
					"id": 124,
					"name": "unzip",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`zip`"
							},
							{
								"kind": "text",
								"text": " except that it accepts an array of grouped\nelements and creates an array regrouping the elements to their pre-zip configuration."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of regrouped elements."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst zipped = zip(['a', 'b'], [1, 2], [true, false])\n// => [['a', 1, true], ['b', 2, false]]\n\nunzip(zipped)\n// => [['a', 'b'], [1, 2], [true, false]]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 125,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						}
					],
					"parameters": [
						{
							"id": 126,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array of grouped elements to process."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 125,
									"name": "TInput"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 125,
							"name": "TInput"
						}
					}
				}
			]
		},
		{
			"id": 127,
			"name": "unzipWith",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/unzipWith.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/unzipWith.ts#L18"
				}
			],
			"signatures": [
				{
					"id": 128,
					"name": "unzipWith",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`unzip`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`iteratee`"
							},
							{
								"kind": "text",
								"text": " to specify\nhow regrouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of regrouped elements."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nconst zipped = zip([1, 2], [10, 20], [100, 200])\n// => [[1, 10, 100], [2, 20, 200]]\n\nunzipWith(add, zipped)\n// => [3, 30, 300]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 129,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						},
						{
							"id": 130,
							"name": "TOutput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 131,
							"name": "iteratee",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to combine regrouped values."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 132,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/unzipWith.ts",
											"line": 18,
											"character": 71,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/unzipWith.ts#L18"
										}
									],
									"signatures": [
										{
											"id": 133,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 134,
													"name": "t",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "reference",
														"id": 129,
														"name": "TInput"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 130,
												"name": "TOutput"
											}
										}
									]
								}
							}
						},
						{
							"id": 135,
							"name": "array",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array of grouped elements to process."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 129,
									"name": "TInput"
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 130,
							"name": "TOutput"
						}
					}
				}
			]
		},
		{
			"id": 136,
			"name": "zip",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/zip.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/zip.ts#L15"
				}
			],
			"signatures": [
				{
					"id": 137,
					"name": "zip",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an array of grouped elements, the first of which contains the first elements of the given arrays,\nthe second of which contains the second elements of the given arrays, and so on."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of grouped elements."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nzip(['a', 'b'], [1, 2], [true, false])\n// => [['a', 1, true], ['b', 2, false]]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 138,
							"name": "TInput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 139,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arrays to process."
									}
								]
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"id": 138,
										"name": "TInput"
									}
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "array",
							"elementType": {
								"type": "reference",
								"id": 138,
								"name": "TInput"
							}
						}
					}
				}
			]
		},
		{
			"id": 140,
			"name": "zipWith",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "array/zipWith.ts",
					"line": 20,
					"character": 16,
					"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/zipWith.ts#L20"
				}
			],
			"signatures": [
				{
					"id": 141,
					"name": "zipWith",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This method is like "
							},
							{
								"kind": "code",
								"text": "`zip`"
							},
							{
								"kind": "text",
								"text": " except that it accepts "
							},
							{
								"kind": "code",
								"text": "`iteratee`"
							},
							{
								"kind": "text",
								"text": " to specify\nhow grouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the new array of grouped elements."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nzipWith([1, 2], [10, 20], [100, 200], (a, b, c) => a + b + c)\n// => [111, 222]\n```"
									}
								]
							}
						]
					},
					"typeParameter": [
						{
							"id": 142,
							"name": "Args",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						},
						{
							"id": 143,
							"name": "TOutput",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 144,
							"name": "combineFunc",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to combine grouped values."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 145,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "array/zipWith.ts",
											"line": 20,
											"character": 70,
											"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/array/zipWith.ts#L20"
										}
									],
									"signatures": [
										{
											"id": 146,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 147,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "reference",
														"id": 142,
														"name": "Args"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 143,
												"name": "TOutput"
											}
										}
									]
								}
							}
						},
						{
							"id": 148,
							"name": "arrays",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arrays to process."
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 142,
										"name": "Args"
									}
								],
								"name": "UnZip"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 143,
							"name": "TOutput"
						}
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Functions",
			"children": [
				176,
				187,
				1,
				149,
				6,
				10,
				15,
				24,
				32,
				158,
				40,
				44,
				49,
				212,
				267,
				58,
				62,
				67,
				71,
				79,
				87,
				91,
				96,
				105,
				109,
				114,
				123,
				127,
				136,
				140
			],
			"categories": [
				{
					"title": "Array",
					"children": [
						1,
						6,
						10,
						15,
						24,
						32,
						40,
						44,
						49,
						58,
						62,
						67,
						71,
						79,
						87,
						91,
						96,
						105,
						109,
						114,
						123,
						127,
						136,
						140
					]
				},
				{
					"title": "Collection",
					"children": [
						149,
						158
					]
				},
				{
					"title": "Function",
					"children": [
						176,
						187,
						212
					]
				},
				{
					"title": "Object",
					"children": [
						267
					]
				}
			]
		}
	],
	"sources": [
		{
			"fileName": "index.ts",
			"line": 1,
			"character": 0,
			"url": "https://github.com/Maggi64/esmdash/blob/28c2864/package/src/index.ts#L1"
		}
	]
}
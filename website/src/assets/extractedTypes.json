{
  "typeDocJsonParserVersion": "7.1.0",
  "id": 0,
  "name": "moderndash",
  "version": "1.0.0",
  "readme": "![ModernDash Logo](/website/src/assets/moderndashLogo.svg)\n\n<p align=center>\n  A Typescript-First utility library inspired by Lodash.\n  Optimized for modern browsers.\n</p>\n<p align=center>\n  ✅ ESM\n  ✅ Tree-shakable\n  ✅ Typescript Strict Mode (no any types)\n  ✅ Zero dependencies\n</p>\n\n-------\n\n> **Warning**\n> This library is still in development and is not ready for production use.\n\n## Documentation\nThe documentation is WIP.\n\n## Removed Functions because of trivial native alternatives\nLook at [You-Dont-Need-Lodash](https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore) for native replacements.\n\n### Array Functions\n- compact\n- concat\n- differenceBy property shorthand\n- drop\n- dropRight\n- fill\n- findIndex\n- findLastIndex\n- first/head\n- flatten\n- flattenDeep\n- flattenDepth\n- fromPairs\n- initial\n- join\n- last\n- lastIndexOf\n- nth\n- without\n- reverse\n- slice\n- sortedIndexOf\n- tail\n- take\n- takeRight\n- without\n\n### Collection Functions\n- each/forEach\n- every\n- filter\n- find\n- flatMap\n- includes\n\n### String Functions\n- lowerCase\n- trim\n- trimEnd\n- trimStart\n- pad\n- padEnd\n- padStart\n\nFunctions are not considered trivial if they:\n - include reduce methods\n - include multiple nested function calls\n\n## TODO\n- More unzip tests\n- Check if flatmapdeep, flatmapDepth is included in native flatmap\n- GroupBy Property Shorthand\n\n## Might be added later (open for discussion)\n- pull functions (pull, pullAll, pullAllBy, pullAllWith, pullAt)\n- remove\n- sorted functions (sortedIndex, sortedIndexBy, sortedIndexOf, sortedLastIndex, sortedLastIndexBy, sortedLastIndexOf, sortedUniq, sortedUniqBy)\n  - if performance is better than native alternatives (testing needed)\n- xor functions (xor, xorBy, xorWith)\n- zipObject, zipObjectDeep\n- forEachRight\n- findLast\n- lowerFirst\n- keyBy\n\n## Continue at\n - invokeMap\n",
  "changelog": null,
  "classes": [],
  "enums": [],
  "functions": [
    {
      "id": 158,
      "name": "after",
      "source": {
        "line": 21,
        "file": "after.ts",
        "path": "function",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/function/after.ts#L21"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 159,
          "name": "after",
          "comment": {
            "description": "The opposite of `before`. This method creates a function that invokes `func` once it's called `n` or more times.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new restricted function."
              },
              {
                "name": "example",
                "text": "const caution = () => console.log(\"Caution!\");\n\nconst afterFN = after(2, caution);\n\nafterFN()\nafterFN()\nafterFN()\n// => `caution` is invoked after called twice"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 160,
              "name": "TFunc",
              "constraint": {
                "kind": "reference",
                "id": 297,
                "name": "GenericFunction",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 160,
                    "name": "TFunc",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 161,
              "name": "n",
              "comment": {
                "description": "The number of calls before `func` is invoked.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 162,
              "name": "func",
              "comment": {
                "description": "The function to restrict.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 160,
                "name": "TFunc",
                "packageName": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reflection",
            "reflection": {
              "id": 163,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "function/after.ts",
                  "line": 23,
                  "character": 11,
                  "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/function/after.ts#L23"
                }
              ],
              "signatures": [
                {
                  "id": 164,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 165,
                      "name": "args",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isRest": true
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "id": 160,
                            "name": "TFunc"
                          }
                        ],
                        "name": "Parameters",
                        "qualifiedName": "Parameters",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      },
                      {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "id": 160,
                            "name": "TFunc"
                          }
                        ],
                        "name": "ReturnType",
                        "qualifiedName": "ReturnType",
                        "package": "typescript"
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "id": 166,
      "name": "before",
      "source": {
        "line": 21,
        "file": "before.ts",
        "path": "function",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/function/before.ts#L21"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 167,
          "name": "before",
          "comment": {
            "description": "Creates a function that invokes `func`, while it's called less than `n` times. Subsequent\ncalls to the created function return the result of the last `func` invocation.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new restricted function."
              },
              {
                "name": "example",
                "text": "const caution = () => console.log(\"Caution!\");\n\n// Only call caution two times\nconst reducedCaution = before(2, caution)\n\nreducedCaution()\nreducedCaution()\nreducedCaution()\n// => `caution` is invoked twice"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 171,
              "name": "TFunc",
              "constraint": {
                "kind": "reflection",
                "reflection": {
                  "id": 168,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function/before.ts",
                      "line": 21,
                      "character": 37,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/function/before.ts#L21"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 169,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 170,
                          "name": "args",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isRest": true
                          },
                          "type": {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 171,
                                "name": "TFunc"
                              }
                            ],
                            "name": "Parameters",
                            "qualifiedName": "Parameters",
                            "package": "typescript"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "id": 171,
                            "name": "TFunc"
                          }
                        ],
                        "name": "ReturnType",
                        "qualifiedName": "ReturnType",
                        "package": "typescript"
                      }
                    }
                  ]
                }
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 172,
              "name": "n",
              "comment": {
                "description": "The number of calls at which `func` is no longer invoked.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 173,
              "name": "func",
              "comment": {
                "description": "The function to restrict.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 171,
                "name": "TFunc",
                "packageName": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 171,
            "name": "TFunc",
            "packageName": null,
            "typeArguments": []
          }
        }
      ]
    },
    {
      "id": 1,
      "name": "chunk",
      "source": {
        "line": 16,
        "file": "chunk.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/chunk.ts#L16"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 2,
          "name": "chunk",
          "comment": {
            "description": "Creates an array of elements split into groups the length of size. If array can't be split evenly, the final chunk will be the remaining elements.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of chunks."
              },
              {
                "name": "example",
                "text": "```ts\nchunk(2, ['a', 'b', 'c', 'd'])\n// => [['a', 'b'], ['c', 'd']]\n\nchunk(3, ['a', 'b', 'c', 'd'])\n// => [['a', 'b', 'c'], ['d']]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 3,
              "name": "TInput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 4,
              "name": "chunkSize",
              "comment": {
                "description": "The array to process.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 5,
              "name": "array",
              "comment": {
                "description": "The length of each chunk",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 3,
                  "name": "TInput",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "array",
              "type": {
                "kind": "reference",
                "id": 3,
                "name": "TInput",
                "packageName": null,
                "typeArguments": []
              }
            }
          }
        }
      ]
    },
    {
      "id": 131,
      "name": "countBy",
      "source": {
        "line": 25,
        "file": "countBy.ts",
        "path": "collection",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/collection/countBy.ts#L25"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 132,
          "name": "countBy",
          "comment": {
            "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the number of times the key was returned by `iteratee`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the composed aggregate object."
              },
              {
                "name": "example",
                "text": "```ts\nconst users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'betty', 'active': true },\n  { 'user': 'fred', 'active': false }\n]\n\ncountBy(users, value => value.active);\n// => { 'true': 2, 'false': 1 }\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 133,
              "name": "TInput",
              "constraint": null,
              "default": null
            },
            {
              "id": 134,
              "name": "TKey",
              "constraint": {
                "kind": "reference",
                "id": null,
                "name": "RecordKey",
                "packageName": null,
                "typeArguments": []
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 135,
              "name": "collection",
              "comment": {
                "description": "The array or record to iterate over.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "ArrayOrRecord",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 133,
                    "name": "TInput",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 136,
              "name": "iteratee",
              "comment": {
                "description": "The iteratee to transform keys.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 137,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "collection/countBy.ts",
                      "line": 25,
                      "character": 101,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/collection/countBy.ts#L25"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 138,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 139,
                          "name": "value",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 133,
                            "name": "TInput"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 134,
                        "name": "TKey"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Record",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 134,
                "name": "TKey",
                "packageName": null,
                "typeArguments": []
              },
              {
                "kind": "intrinsic",
                "type": "number"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 6,
      "name": "difference",
      "source": {
        "line": 19,
        "file": "difference.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/difference.ts#L19"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 7,
          "name": "difference",
          "comment": {
            "description": "Creates an array of `array` values not included in the other given arrays. The order and references of result values are determined by the first array.\n\n**Note:** Unlike `pullAll`, this method returns a new array.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of filtered values."
              },
              {
                "name": "example",
                "text": "```ts\ndifference([2, 1], [2, 3])\n// => [1]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 8,
              "name": "TInput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 9,
              "name": "arrays",
              "comment": {
                "description": "First array is inspected, others are excluded.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "MinimumTwoArrays",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 8,
                    "name": "TInput",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 8,
              "name": "TInput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 10,
      "name": "differenceBy",
      "source": {
        "line": 27,
        "file": "differenceBy.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/differenceBy.ts#L27"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 11,
          "name": "differenceBy",
          "comment": {
            "description": "This method is like `difference` except that it accepts `iteratee` which\nis invoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array.\n\n**Note:** Unlike `pullAllBy`, this method returns a new array.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of filtered values."
              },
              {
                "name": "example",
                "text": "```ts\ndifferenceBy(Math.floor, [2.1, 1.2], [2.3, 3.4])\n// => [1.2]\ndifferenceBy('x', [{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }])\n// => [{ 'x': 2 }]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 12,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 13,
              "name": "iteratee",
              "comment": {
                "description": "The iteratee invoked per element. Or property shorthand.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "IterateeFunction",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 12,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "typeOperator",
                    "operator": "keyof",
                    "type": {
                      "kind": "reference",
                      "id": 12,
                      "name": "T",
                      "packageName": null,
                      "typeArguments": []
                    }
                  }
                ]
              }
            },
            {
              "id": 14,
              "name": "arrays",
              "comment": {
                "description": "First array to inspect. Others are excluded.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "MinimumTwoArrays",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 12,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 12,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 15,
      "name": "differenceWith",
      "source": {
        "line": 20,
        "file": "differenceWith.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/differenceWith.ts#L20"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 16,
          "name": "differenceWith",
          "comment": {
            "description": "This method is like `difference` except that it accepts `comparator`\nwhich is invoked to compare elements of `array` to `values`. The order and\nreferences of result values are determined by the first array. The comparator\nis invoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `pullAllWith`, this method returns a new array.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of filtered values."
              },
              {
                "name": "example",
                "text": "```ts\ndifferenceWith(isEqual, [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }], [{ 'x': 1, 'y': 2 }])\n// => [{ 'x': 2, 'y': 1 }]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 17,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 18,
              "name": "comparator",
              "comment": {
                "description": "The comparator invoked per element.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 19,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "array/differenceWith.ts",
                      "line": 20,
                      "character": 46,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/differenceWith.ts#L20"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 20,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 21,
                          "name": "a",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 17,
                            "name": "T"
                          }
                        },
                        {
                          "id": 22,
                          "name": "b",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 17,
                            "name": "T"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 23,
              "name": "arrays",
              "comment": {
                "description": "First array to inspect. Others are excluded.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "MinimumTwoArrays",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 17,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 17,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 24,
      "name": "dropRightWhile",
      "source": {
        "line": 22,
        "file": "dropRightWhile.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/dropRightWhile.ts#L22"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 25,
          "name": "dropRightWhile",
          "comment": {
            "description": "Creates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the slice of `array`."
              },
              {
                "name": "example",
                "text": "```ts\nconst users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': true }\n]\n\ndropRightWhile(({ active }) => active, users)\n// => objects for ['barney']\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 26,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 27,
              "name": "predicate",
              "comment": {
                "description": "The function invoked per iteration.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 28,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "array/dropRightWhile.ts",
                      "line": 22,
                      "character": 45,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/dropRightWhile.ts#L22"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 29,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 30,
                          "name": "value",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 26,
                            "name": "T"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 31,
              "name": "array",
              "comment": {
                "description": "The array to query.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 26,
                  "name": "T",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 26,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 32,
      "name": "dropWhile",
      "source": {
        "line": 21,
        "file": "dropWhile.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/dropWhile.ts#L21"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 33,
          "name": "dropWhile",
          "comment": {
            "description": "Creates a slice of `array` excluding elements dropped from the beginning.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the slice of `array`."
              },
              {
                "name": "example",
                "text": "```ts\nconst users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': false }\n]\n\ndropWhile(({ active }) => active, users)\n// => objects for ['pebbles']\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 34,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 35,
              "name": "predicate",
              "comment": {
                "description": "The function invoked per iteration.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 36,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "array/dropWhile.ts",
                      "line": 21,
                      "character": 40,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/dropWhile.ts#L21"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 37,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 38,
                          "name": "value",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 34,
                            "name": "T"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 39,
              "name": "array",
              "comment": {
                "description": "The array to query.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 34,
                  "name": "T",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 34,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 140,
      "name": "groupBy",
      "source": {
        "line": 22,
        "file": "groupBy.ts",
        "path": "collection",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/collection/groupBy.ts#L22"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 141,
          "name": "groupBy",
          "comment": {
            "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The order of grouped values\nis determined by the order they occur in `collection`. The corresponding\nvalue of each key is an array of elements responsible for generating the\nkey.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the composed aggregate object."
              },
              {
                "name": "example",
                "text": "```ts\ngroupBy([6.1, 4.2, 6.3], Math.floor)\n// => { '4': [4.2], '6': [6.1, 6.3] }\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 142,
              "name": "T",
              "constraint": null,
              "default": null
            },
            {
              "id": 143,
              "name": "U",
              "constraint": {
                "kind": "reference",
                "id": null,
                "name": "RecordKey",
                "packageName": null,
                "typeArguments": []
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 144,
              "name": "collection",
              "comment": {
                "description": "The array or object to iterate over.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "ArrayOrRecord",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 142,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            },
            {
              "id": 145,
              "name": "iteratee",
              "comment": {
                "description": "The iteratee to transform keys.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 146,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "collection/groupBy.ts",
                      "line": 22,
                      "character": 88,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/collection/groupBy.ts#L22"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 147,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 148,
                          "name": "value",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 142,
                            "name": "T"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 143,
                        "name": "U"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Record",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 143,
                "name": "U",
                "packageName": null,
                "typeArguments": []
              },
              {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 142,
                  "name": "T",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            ]
          }
        }
      ]
    },
    {
      "id": 40,
      "name": "intersection",
      "source": {
        "line": 18,
        "file": "intersection.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/intersection.ts#L18"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 41,
          "name": "intersection",
          "comment": {
            "description": "Creates an array of unique values that are included in all given arrays.\nThe order and references of result values are determined by the first array.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of intersecting values."
              },
              {
                "name": "example",
                "text": "```ts\nintersection([2, 1], [2, 3])\n// => [2]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 42,
              "name": "TInput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 43,
              "name": "arrays",
              "comment": {
                "description": "The arrays to inspect.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "MinimumTwoArrays",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 42,
                    "name": "TInput",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 42,
              "name": "TInput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 44,
      "name": "intersectionBy",
      "source": {
        "line": 23,
        "file": "intersectionBy.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/intersectionBy.ts#L23"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 45,
          "name": "intersectionBy",
          "comment": {
            "description": "This method is like `intersection` except that it accepts `iteratee`\nwhich is invoked for each element of each `arrays` to generate the criterion\nby which they're compared. The order and references of result values are\ndetermined by the first array. The iteratee is invoked with one argument:\n(value).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of intersecting values."
              },
              {
                "name": "example",
                "text": "```ts\nintersectionBy(Math.floor, [2.1, 1.2], [2.3, 3.4])\n// => [2.1]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 46,
              "name": "TInput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 47,
              "name": "iteratee",
              "comment": {
                "description": "The iteratee invoked per element. Or property shorthand.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "IterateeFunction",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 46,
                        "name": "TInput",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "typeOperator",
                    "operator": "keyof",
                    "type": {
                      "kind": "reference",
                      "id": 46,
                      "name": "TInput",
                      "packageName": null,
                      "typeArguments": []
                    }
                  }
                ]
              }
            },
            {
              "id": 48,
              "name": "arrays",
              "comment": {
                "description": "The arrays to inspect.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "MinimumTwoArrays",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 46,
                    "name": "TInput",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 46,
              "name": "TInput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 49,
      "name": "intersectionWith",
      "source": {
        "line": 21,
        "file": "intersectionWith.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/intersectionWith.ts#L21"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 50,
          "name": "intersectionWith",
          "comment": {
            "description": "This method is like `intersection` except that it accepts `comparator`\nwhich is invoked to compare elements of `arrays`. The order and references\nof result values are determined by the first array. The comparator is\ninvoked with two arguments: (arrVal, othVal).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of intersecting values."
              },
              {
                "name": "example",
                "text": "```ts\nconst objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\nconst others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n\nintersectionWith(isEqual, objects, others)\n// => [{ 'x': 1, 'y': 2 }]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 51,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 52,
              "name": "comparator",
              "comment": {
                "description": "The comparator invoked per element.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 53,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "array/intersectionWith.ts",
                      "line": 21,
                      "character": 48,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/intersectionWith.ts#L21"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 54,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 55,
                          "name": "a",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 51,
                            "name": "T"
                          }
                        },
                        {
                          "id": 56,
                          "name": "b",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 51,
                            "name": "T"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 57,
              "name": "arrays",
              "comment": {
                "description": "The arrays to inspect.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "MinimumTwoArrays",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 51,
                    "name": "T",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 51,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 224,
      "name": "isEmpty",
      "source": {
        "line": 33,
        "file": "isEmpty.ts",
        "path": "lang",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/lang/isEmpty.ts#L33"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 225,
          "name": "isEmpty",
          "comment": {
            "description": "Checks if `value` is an empty object, collection, map, or set.\n\nObjects are considered empty if they have no own enumerable string keyed\nproperties.\n\nArray-like values such as `arguments` objects, arrays, buffers, strings, or\nSimilarly, maps and sets are considered empty if they have a `size` of `0`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns `true` if `value` is empty, else `false`."
              },
              {
                "name": "example",
                "text": "```ts\nisEmpty(null)\n// => true\n\nisEmpty({})\n// => true\n\nisEmpty(\"\")\n// => true\n\nisEmpty([1, 2, 3])\n// => false\n\nisEmpty('abc')\n// => false\n\nisEmpty({ 'a': 1 })\n// => false\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 226,
              "name": "value",
              "comment": {
                "description": "The value to check.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "intrinsic",
                    "type": "undefined"
                  },
                  {
                    "kind": "literal",
                    "value": "null"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "string"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "object"
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ]
    },
    {
      "id": 227,
      "name": "isEqual",
      "source": {
        "line": 29,
        "file": "isEqual.ts",
        "path": "lang",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/lang/isEqual.ts#L29"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 228,
          "name": "isEqual",
          "comment": {
            "description": "Performs a deep comparison between two values to determine if they are\nequivalent.\n\n**Note:** This method supports comparing arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, `Object` objects, regexes,\nsets, strings, symbols, and typed arrays. `Object` objects are compared\nby their own, not inherited, enumerable properties. Functions and DOM\nnodes are compared by strict equality, i.e. `===`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns `true` if the values are equivalent, else `false`."
              },
              {
                "name": "example",
                "text": "```ts\nvar object = { 'a': 1 };\nvar other = { 'a': 1 };\n\n_.isEqual(object, other);\n// => true\n\nobject === other;\n// => false\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [],
          "parameters": [
            {
              "id": 229,
              "name": "value1",
              "comment": {
                "description": "The value to compare.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            },
            {
              "id": 230,
              "name": "value2",
              "comment": {
                "description": "The other value to compare.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "unknown"
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ]
    },
    {
      "id": 231,
      "name": "isEqualWith",
      "source": {
        "line": 32,
        "file": "isEqualWith.ts",
        "path": "lang",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/lang/isEqualWith.ts#L32"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 232,
          "name": "isEqualWith",
          "comment": {
            "description": "This method is like `_.isEqual` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with up to\nsix arguments: (objValue, othValue [, index|key, object, other, stack]).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns `true` if the values are equivalent, else `false`."
              },
              {
                "name": "example",
                "text": "```ts\nfunction isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n\nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n\nisEqualWith(array, other, customizer);\n// => true\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 233,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 234,
              "name": "a",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 233,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            },
            {
              "id": 235,
              "name": "b",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 233,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            },
            {
              "id": 236,
              "name": "customizer",
              "comment": {
                "description": "The function to customize comparisons.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 237,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "lang/isEqualWith.ts",
                      "line": 32,
                      "character": 55,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/lang/isEqualWith.ts#L32"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 238,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 239,
                          "name": "value",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 233,
                            "name": "T"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "unknown"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "returnType": {
            "kind": "intrinsic",
            "type": "boolean"
          }
        }
      ]
    },
    {
      "id": 188,
      "name": "memoize",
      "source": {
        "line": 46,
        "file": "memoize.ts",
        "path": "function",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/function/memoize.ts#L46"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 189,
          "name": "memoize",
          "comment": {
            "description": "Creates a function that memoizes the result of `func`. If `resolver` is\nprovided, it determines the cache key for storing the result based on the\narguments provided to the memoized function. By default, all arguments\nprovided to the memoized function are used as the map cache key.\n\n**Note:** The cache is exposed as the `cache` property on the memoized\nfunction. Its creation may be customized by replacing the `memoize.Cache`\nconstructor with one whose instances implement the\n[`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\nmethod interface of `clear`, `delete`, `get`, `has`, and `set`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new memoized function."
              },
              {
                "name": "example",
                "text": "const object = { 'a': 1, 'b': 2 }\n\nconst values = memoize(values)\nvalues(object)\n// => [1, 2]\n\nvalues(object)\n// => [1, 2]\n\nobject.a = 2\nvalues(object)\n// => [2, 2]\n\n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b'])\nvalues(object)\n// => ['a', 'b']\n\n// Replace `memoize.Cache`.\nmemoize.Cache = WeakMap"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 190,
              "name": "TFunc",
              "constraint": {
                "kind": "reference",
                "id": 297,
                "name": "GenericFunction",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 190,
                    "name": "TFunc",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              },
              "default": null
            },
            {
              "id": 191,
              "name": "Cache",
              "constraint": {
                "kind": "reference",
                "id": null,
                "name": "Map",
                "packageName": "typescript",
                "typeArguments": [
                  {
                    "kind": "union",
                    "types": [
                      {
                        "kind": "intrinsic",
                        "type": "string"
                      },
                      {
                        "kind": "intrinsic",
                        "type": "symbol"
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "ReturnType",
                    "packageName": "typescript",
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 190,
                        "name": "TFunc",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "reference",
                    "id": 191,
                    "name": "Cache",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 192,
              "name": "func",
              "comment": {
                "description": "The function to have its output memoized.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 190,
                "name": "TFunc",
                "packageName": null,
                "typeArguments": []
              }
            },
            {
              "id": 193,
              "name": "resolver",
              "comment": {
                "description": "The function to resolve the cache key.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 194,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function/memoize.ts",
                      "line": 47,
                      "character": 28,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/function/memoize.ts#L47"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 195,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 196,
                          "name": "args",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isRest": true
                          },
                          "type": {
                            "type": "reference",
                            "typeArguments": [
                              {
                                "type": "reference",
                                "id": 190,
                                "name": "TFunc"
                              }
                            ],
                            "name": "Parameters",
                            "qualifiedName": "Parameters",
                            "package": "typescript"
                          }
                        }
                      ],
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "intrinsic",
                            "name": "symbol"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          "returnType": {
            "kind": "intersection",
            "types": [
              {
                "kind": "reference",
                "id": 190,
                "name": "TFunc",
                "packageName": null,
                "typeArguments": []
              },
              {
                "kind": "reflection",
                "reflection": {
                  "id": 197,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 198,
                      "name": "cache",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "function/memoize.ts",
                          "line": 48,
                          "character": 13,
                          "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/function/memoize.ts#L48"
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 191,
                        "name": "Cache"
                      }
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "children": [
                        198
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "function/memoize.ts",
                      "line": 48,
                      "character": 11,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/function/memoize.ts#L48"
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    },
    {
      "id": 199,
      "name": "once",
      "source": {
        "line": 20,
        "file": "once.ts",
        "path": "function",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/function/once.ts#L20"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 200,
          "name": "once",
          "comment": {
            "description": "Creates a function that is restricted to invoking `func` once. Repeat calls\nto the function return the value of the first invocation. The `func` is\ninvoked with the `this` binding and arguments of the created function.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new restricted function."
              },
              {
                "name": "example",
                "text": "const initialize = once(() => console.log('initialize'))\ninitialize()\ninitialize()\n// => `createApplication` is invoked once"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 201,
              "name": "TFunc",
              "constraint": {
                "kind": "reference",
                "id": 297,
                "name": "GenericFunction",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 201,
                    "name": "TFunc",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 202,
              "name": "func",
              "comment": {
                "description": "The function to restrict.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 201,
                "name": "TFunc",
                "packageName": null,
                "typeArguments": []
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": 201,
            "name": "TFunc",
            "packageName": null,
            "typeArguments": []
          }
        }
      ]
    },
    {
      "id": 243,
      "name": "pick",
      "source": {
        "line": 16,
        "file": "pick.ts",
        "path": "object",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/object/pick.ts#L16"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 244,
          "name": "pick",
          "comment": {
            "description": "Creates an object composed of the picked `object` properties.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new object."
              },
              {
                "name": "example",
                "text": "```ts\nconst object = { 'a': 1, 'b': '2', 'c': 3 }\n\npick(object, ['a', 'c'])\n// => { 'a': 1, 'c': 3 }\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 245,
              "name": "T",
              "constraint": null,
              "default": null
            },
            {
              "id": 246,
              "name": "K",
              "constraint": {
                "kind": "union",
                "types": [
                  {
                    "kind": "intrinsic",
                    "type": "string"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "number"
                  },
                  {
                    "kind": "intrinsic",
                    "type": "symbol"
                  }
                ]
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 247,
              "name": "object",
              "comment": {
                "description": "The source object.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": 245,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              }
            },
            {
              "id": 248,
              "name": "keys",
              "comment": {
                "description": "The property paths to pick.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 246,
                  "name": "K",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "reference",
            "id": null,
            "name": "Pick",
            "packageName": "typescript",
            "typeArguments": [
              {
                "kind": "reference",
                "id": 245,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              },
              {
                "kind": "reference",
                "id": 246,
                "name": "K",
                "packageName": null,
                "typeArguments": []
              }
            ]
          }
        }
      ]
    },
    {
      "id": 58,
      "name": "sample",
      "source": {
        "line": 12,
        "file": "sample.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/sample.ts#L12"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 59,
          "name": "sample",
          "comment": {
            "description": "Gets a random element from `array`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the random element."
              },
              {
                "name": "example",
                "text": "```ts\nsample([1, 2, 3, 4])\n// => 2\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 60,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 61,
              "name": "array",
              "comment": {
                "description": "The array to sample.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 60,
                  "name": "T",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "union",
            "types": [
              {
                "kind": "reference",
                "id": 60,
                "name": "T",
                "packageName": null,
                "typeArguments": []
              },
              {
                "kind": "intrinsic",
                "type": "undefined"
              }
            ]
          }
        }
      ]
    },
    {
      "id": 62,
      "name": "sampleSize",
      "source": {
        "line": 19,
        "file": "sampleSize.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/sampleSize.ts#L19"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 63,
          "name": "sampleSize",
          "comment": {
            "description": "Gets `n` random elements at unique keys from `array` up to the\nsize of `array`.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the random elements."
              },
              {
                "name": "example",
                "text": "```ts\nsampleSize([1, 2, 3], 2)\n// => [3, 1]\n\nsampleSize([1, 2, 3], 4)\n// => [2, 3, 1]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 64,
              "name": "TInput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 65,
              "name": "size",
              "comment": {
                "description": "The number of elements to sample.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 66,
              "name": "array",
              "comment": {
                "description": "The array to sample.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 64,
                  "name": "TInput",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 64,
              "name": "TInput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 67,
      "name": "shuffle",
      "source": {
        "line": 14,
        "file": "shuffle.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/shuffle.ts#L14"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 68,
          "name": "shuffle",
          "comment": {
            "description": "Creates an array of shuffled values, using a version of the\n[Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).",
            "blockTags": [
              {
                "name": "since",
                "text": "0.1.0"
              },
              {
                "name": "returns",
                "text": "Returns the new shuffled array."
              },
              {
                "name": "example",
                "text": "```ts\nshuffle([1, 2, 3, 4])\n// => [4, 1, 3, 2]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 69,
              "name": "TInput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 70,
              "name": "array",
              "comment": {
                "description": "The array or object to shuffle.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 69,
                  "name": "TInput",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 69,
              "name": "TInput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 71,
      "name": "takeRightWhile",
      "source": {
        "line": 21,
        "file": "takeRightWhile.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/takeRightWhile.ts#L21"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 72,
          "name": "takeRightWhile",
          "comment": {
            "description": "Creates a slice of `array` with elements taken from the end. Elements are\ntaken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the slice of `array`."
              },
              {
                "name": "example",
                "text": "```ts\nconst users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': true }\n]\n\ntakeRightWhile(({ active }) => active, users)\n// => objects for ['fred', 'pebbles']\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 73,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 74,
              "name": "predicate",
              "comment": {
                "description": "The function invoked per iteration.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 75,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "array/takeRightWhile.ts",
                      "line": 21,
                      "character": 45,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/takeRightWhile.ts#L21"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 76,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 77,
                          "name": "elem",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 73,
                            "name": "T"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 78,
              "name": "array",
              "comment": {
                "description": "The array to query.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 73,
                  "name": "T",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 73,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 79,
      "name": "takeWhile",
      "source": {
        "line": 21,
        "file": "takeWhile.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/takeWhile.ts#L21"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 80,
          "name": "takeWhile",
          "comment": {
            "description": "Creates a slice of `array` with elements taken from the beginning. Elements\nare taken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the slice of `array`."
              },
              {
                "name": "example",
                "text": "```ts\nconst users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': true },\n  { 'user': 'pebbles', 'active': false }\n]\n\ntakeWhile(({ active }) => active, users)\n// => objects for ['barney', 'fred']\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 81,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 82,
              "name": "predicate",
              "comment": {
                "description": "The function invoked per iteration.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 83,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "array/takeWhile.ts",
                      "line": 21,
                      "character": 40,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/takeWhile.ts#L21"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 84,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 85,
                          "name": "elem",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 81,
                            "name": "T"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 86,
              "name": "array",
              "comment": {
                "description": "The array to query.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 81,
                  "name": "T",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 81,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 216,
      "name": "times",
      "source": {
        "line": 20,
        "file": "times.ts",
        "path": "function",
        "url": null
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 217,
          "name": "times",
          "comment": {
            "description": "Invokes the iteratee `n` times, returning an array of the results of\neach invocation. The function is invoked with one argument: (index).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the array of results."
              },
              {
                "name": "example",
                "text": "```ts\ntimes(3, index => console.log(\"Run\", index)))\n// => \"Run 0\" | \"Run 1\" | \"Run 2\"\n\ntimes(3, Math.random)\n// => [0.123, 0.456, 0.789]\n\ntimes(4, () => 0)\n// => [0, 0, 0, 0]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 218,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 219,
              "name": "n",
              "comment": {
                "description": "The number of times to invoke `func`.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "intrinsic",
                "type": "number"
              }
            },
            {
              "id": 220,
              "name": "func",
              "comment": {
                "description": null,
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 221,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "function/times.ts",
                      "line": 20,
                      "character": 42
                    }
                  ],
                  "signatures": [
                    {
                      "id": 222,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 223,
                          "name": "index",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 218,
                        "name": "T"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 218,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 87,
      "name": "uniq",
      "source": {
        "line": 16,
        "file": "uniq.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/uniq.ts#L16"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 88,
          "name": "uniq",
          "comment": {
            "description": "Creates a duplicate-free version of an array, in which only the first occurrence of each element is kept.\nThe order of result values is determined by the order they occur in the array.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new duplicate free array."
              },
              {
                "name": "example",
                "text": "```ts\nuniq([2, 1, 2])\n// => [2, 1]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 89,
              "name": "TInput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 90,
              "name": "array",
              "comment": {
                "description": "The array to inspect.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 89,
                  "name": "TInput",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 89,
              "name": "TInput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 91,
      "name": "uniqBy",
      "source": {
        "line": 21,
        "file": "uniqBy.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/uniqBy.ts#L21"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 92,
          "name": "uniqBy",
          "comment": {
            "description": "This method is like `uniq` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nuniqueness is computed. The order of result values is determined by the\norder they occur in the array.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new duplicate free array."
              },
              {
                "name": "example",
                "text": "```ts\nuniqBy(Math.floor, [2.1, 1.2, 2.3])\n// => [2.1, 1.2]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 93,
              "name": "T",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 94,
              "name": "iteratee",
              "comment": {
                "description": "The iteratee invoked per element. Or property shorthand.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "union",
                "types": [
                  {
                    "kind": "reference",
                    "id": null,
                    "name": "IterateeFunction",
                    "packageName": null,
                    "typeArguments": [
                      {
                        "kind": "reference",
                        "id": 93,
                        "name": "T",
                        "packageName": null,
                        "typeArguments": []
                      }
                    ]
                  },
                  {
                    "kind": "typeOperator",
                    "operator": "keyof",
                    "type": {
                      "kind": "reference",
                      "id": 93,
                      "name": "T",
                      "packageName": null,
                      "typeArguments": []
                    }
                  }
                ]
              }
            },
            {
              "id": 95,
              "name": "array",
              "comment": {
                "description": "The array to inspect.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 93,
                  "name": "T",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 93,
              "name": "T",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 96,
      "name": "uniqWith",
      "source": {
        "line": 16,
        "file": "uniqWith.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/uniqWith.ts#L16"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 97,
          "name": "uniqWith",
          "comment": {
            "description": "This method is like `uniq` except that it accepts `comparator` which is invoked to compare elements of `array`.\nThe order of result values is determined by the order they occur in the array.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new duplicate free array."
              },
              {
                "name": "example",
                "text": "```ts\nconst objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }]\n\nuniqWith(isEqual, objects)\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 98,
              "name": "TInput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 99,
              "name": "comparator",
              "comment": {
                "description": "The comparator invoked per element.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 100,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "array/uniqWith.ts",
                      "line": 16,
                      "character": 45,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/uniqWith.ts#L16"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 101,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 102,
                          "name": "a",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 98,
                            "name": "TInput"
                          }
                        },
                        {
                          "id": 103,
                          "name": "b",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {},
                          "type": {
                            "type": "reference",
                            "id": 98,
                            "name": "TInput"
                          }
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 104,
              "name": "array",
              "comment": {
                "description": "The array to inspect.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 98,
                  "name": "TInput",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 98,
              "name": "TInput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 105,
      "name": "unzip",
      "source": {
        "line": 18,
        "file": "unzip.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/unzip.ts#L18"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 106,
          "name": "unzip",
          "comment": {
            "description": "This method is like `zip` except that it accepts an array of grouped\nelements and creates an array regrouping the elements to their pre-zip configuration.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of regrouped elements."
              },
              {
                "name": "example",
                "text": "```ts\nconst zipped = zip(['a', 'b'], [1, 2], [true, false])\n// => [['a', 1, true], ['b', 2, false]]\n\nunzip(zipped)\n// => [['a', 'b'], [1, 2], [true, false]]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 107,
              "name": "TInput",
              "constraint": {
                "kind": "array",
                "type": {
                  "kind": "intrinsic",
                  "type": "unknown"
                }
              },
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 108,
              "name": "array",
              "comment": {
                "description": "The array of grouped elements to process.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 107,
                  "name": "TInput",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 107,
              "name": "TInput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 109,
      "name": "unzipWith",
      "source": {
        "line": 18,
        "file": "unzipWith.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/unzipWith.ts#L18"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 110,
          "name": "unzipWith",
          "comment": {
            "description": "This method is like `unzip` except that it accepts `iteratee` to specify\nhow regrouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of regrouped elements."
              },
              {
                "name": "example",
                "text": "```ts\nconst zipped = zip([1, 2], [10, 20], [100, 200])\n// => [[1, 10, 100], [2, 20, 200]]\n\nunzipWith(add, zipped)\n// => [3, 30, 300]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 111,
              "name": "TInput",
              "constraint": {
                "kind": "array",
                "type": {
                  "kind": "intrinsic",
                  "type": "unknown"
                }
              },
              "default": null
            },
            {
              "id": 112,
              "name": "TOutput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 113,
              "name": "iteratee",
              "comment": {
                "description": "The function to combine regrouped values.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 114,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "array/unzipWith.ts",
                      "line": 18,
                      "character": 71,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/unzipWith.ts#L18"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 115,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 116,
                          "name": "t",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isRest": true
                          },
                          "type": {
                            "type": "reference",
                            "id": 111,
                            "name": "TInput"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 112,
                        "name": "TOutput"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 117,
              "name": "array",
              "comment": {
                "description": "The array of grouped elements to process.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "reference",
                  "id": 111,
                  "name": "TInput",
                  "packageName": null,
                  "typeArguments": []
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 112,
              "name": "TOutput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    },
    {
      "id": 118,
      "name": "zip",
      "source": {
        "line": 15,
        "file": "zip.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/zip.ts#L15"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 119,
          "name": "zip",
          "comment": {
            "description": "Creates an array of grouped elements, the first of which contains the first elements of the given arrays,\nthe second of which contains the second elements of the given arrays, and so on.",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of grouped elements."
              },
              {
                "name": "example",
                "text": "```ts\nzip(['a', 'b'], [1, 2], [true, false])\n// => [['a', 1, true], ['b', 2, false]]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 120,
              "name": "TInput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 121,
              "name": "arrays",
              "comment": {
                "description": "The arrays to process.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "array",
                "type": {
                  "kind": "array",
                  "type": {
                    "kind": "reference",
                    "id": 120,
                    "name": "TInput",
                    "packageName": null,
                    "typeArguments": []
                  }
                }
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "array",
              "type": {
                "kind": "reference",
                "id": 120,
                "name": "TInput",
                "packageName": null,
                "typeArguments": []
              }
            }
          }
        }
      ]
    },
    {
      "id": 122,
      "name": "zipWith",
      "source": {
        "line": 20,
        "file": "zipWith.ts",
        "path": "array",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/zipWith.ts#L20"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "signatures": [
        {
          "id": 123,
          "name": "zipWith",
          "comment": {
            "description": "This method is like `zip` except that it accepts `iteratee` to specify\nhow grouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
            "blockTags": [
              {
                "name": "returns",
                "text": "Returns the new array of grouped elements."
              },
              {
                "name": "example",
                "text": "```ts\nzipWith([1, 2], [10, 20], [100, 200], (a, b, c) => a + b + c)\n// => [111, 222]\n```"
              }
            ],
            "modifierTags": []
          },
          "typeParameters": [
            {
              "id": 124,
              "name": "Args",
              "constraint": {
                "kind": "array",
                "type": {
                  "kind": "intrinsic",
                  "type": "unknown"
                }
              },
              "default": null
            },
            {
              "id": 125,
              "name": "TOutput",
              "constraint": null,
              "default": null
            }
          ],
          "parameters": [
            {
              "id": 126,
              "name": "combineFunc",
              "comment": {
                "description": "The function to combine grouped values.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reflection",
                "reflection": {
                  "id": 127,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "sources": [
                    {
                      "fileName": "array/zipWith.ts",
                      "line": 20,
                      "character": 70,
                      "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/array/zipWith.ts#L20"
                    }
                  ],
                  "signatures": [
                    {
                      "id": 128,
                      "name": "__type",
                      "kind": 4096,
                      "kindString": "Call signature",
                      "flags": {},
                      "parameters": [
                        {
                          "id": 129,
                          "name": "args",
                          "kind": 32768,
                          "kindString": "Parameter",
                          "flags": {
                            "isRest": true
                          },
                          "type": {
                            "type": "reference",
                            "id": 124,
                            "name": "Args"
                          }
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 125,
                        "name": "TOutput"
                      }
                    }
                  ]
                }
              }
            },
            {
              "id": 130,
              "name": "arrays",
              "comment": {
                "description": "The arrays to process.",
                "blockTags": [],
                "modifierTags": []
              },
              "optional": false,
              "type": {
                "kind": "reference",
                "id": null,
                "name": "UnZip",
                "packageName": null,
                "typeArguments": [
                  {
                    "kind": "reference",
                    "id": 124,
                    "name": "Args",
                    "packageName": null,
                    "typeArguments": []
                  }
                ]
              }
            }
          ],
          "returnType": {
            "kind": "array",
            "type": {
              "kind": "reference",
              "id": 125,
              "name": "TOutput",
              "packageName": null,
              "typeArguments": []
            }
          }
        }
      ]
    }
  ],
  "interfaces": [],
  "namespaces": [],
  "typeAliases": [
    {
      "id": 297,
      "name": "GenericFunction",
      "source": {
        "line": 15,
        "file": "types.ts",
        "path": ".",
        "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/types.ts#L15"
      },
      "comment": {
        "description": null,
        "blockTags": [],
        "modifierTags": []
      },
      "external": false,
      "typeParameters": [
        {
          "id": 304,
          "name": "TFunc",
          "constraint": {
            "kind": "reflection",
            "reflection": {
              "id": 301,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "types.ts",
                  "line": 15,
                  "character": 42,
                  "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/types.ts#L15"
                }
              ],
              "signatures": [
                {
                  "id": 302,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 303,
                      "name": "args",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isRest": true
                      },
                      "type": {
                        "type": "reference",
                        "typeArguments": [
                          {
                            "type": "reference",
                            "id": 304,
                            "name": "TFunc"
                          }
                        ],
                        "name": "Parameters",
                        "qualifiedName": "Parameters",
                        "package": "typescript"
                      }
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 304,
                        "name": "TFunc"
                      }
                    ],
                    "name": "ReturnType",
                    "qualifiedName": "ReturnType",
                    "package": "typescript"
                  }
                }
              ]
            }
          },
          "default": null
        }
      ],
      "type": {
        "kind": "reflection",
        "reflection": {
          "id": 298,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "sources": [
            {
              "fileName": "types.ts",
              "line": 15,
              "character": 95,
              "url": "https://github.com/Maggi64/esmdash/blob/5fcc4f4/package/src/types.ts#L15"
            }
          ],
          "signatures": [
            {
              "id": 299,
              "name": "__type",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "summary": [],
                "blockTags": [
                  {
                    "tag": "@description",
                    "content": [
                      {
                        "kind": "text",
                        "text": "Generic function type, should fit any function"
                      }
                    ]
                  }
                ]
              },
              "parameters": [
                {
                  "id": 300,
                  "name": "args",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isRest": true
                  },
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 304,
                        "name": "TFunc"
                      }
                    ],
                    "name": "Parameters",
                    "qualifiedName": "Parameters",
                    "package": "typescript"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 304,
                    "name": "TFunc"
                  }
                ],
                "name": "ReturnType",
                "qualifiedName": "ReturnType",
                "package": "typescript"
              }
            }
          ]
        }
      }
    }
  ],
  "variables": []
}